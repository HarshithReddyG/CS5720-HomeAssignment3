# -*- coding: utf-8 -*-
"""HA3_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nKSu4VeT8TL4OYwVJNCfAoVhB18qvy2e

Q3: Implementing an RNN for Text Generation using

Step 1: Import necessary libraries
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Embedding
import random
import sys

"""Step 2: Load Shakespeare dataset from TensorFlow

Step 3: Preprocess the text

Step 4: Create input sequences and targets
"""

path_to_file = tf.keras.utils.get_file('shakespeare.txt',
    'https://storage.googleapis.com/download.tensorflow.org/data/shakespeare.txt')
text = open(path_to_file, 'rb').read().decode(encoding='utf-8')


vocab = sorted(set(text))
char2idx = {char: idx for idx, char in enumerate(vocab)}
idx2char = np.array(vocab)
text_as_int = np.array([char2idx[c] for c in text])


seq_length = 100
examples_per_epoch = len(text) // (seq_length + 1)

char_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)
sequences = char_dataset.batch(seq_length + 1, drop_remainder=True)

def split_input_target(chunk):
    input_text = chunk[:-1]
    target_text = chunk[1:]
    return input_text, target_text

dataset = sequences.map(split_input_target)

"""Step 5: Prepare the data for training

Step 6: Define the model

Step 7: Compile and train
"""

BATCH_SIZE = 64
BUFFER_SIZE = 10000
dataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True)

vocab_size = len(vocab)
embedding_dim = 256
rnn_units = 512

model = Sequential([
    Embedding(vocab_size, embedding_dim),
    LSTM(rnn_units, return_sequences=True),
    Dense(vocab_size)
])

# Build the model with batch size
model.build(input_shape=(BATCH_SIZE, None))

model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True))
model.fit(dataset, epochs=5)

"""Step 8: Text generation function

Step 9: Generate and display text
"""

def generate_text(model, start_string, temperature=1.0):
    temp_model = Sequential([
        Embedding(vocab_size, embedding_dim),
        LSTM(rnn_units, return_sequences=True, stateful=True), # Make LSTM stateful
        Dense(vocab_size)
    ])
    temp_model.build(tf.TensorShape([1, None]))
    temp_model.set_weights(model.get_weights())

    input_eval = [char2idx[s] for s in start_string]
    input_eval = tf.expand_dims(input_eval, 0)
    text_generated = []

    # Get the LSTM layer from the temp_model
    lstm_layer = temp_model.layers[1]

    # Reset the state of the LSTM layer
    lstm_layer.reset_states()

    for i in range(200):
        predictions = temp_model(input_eval)
        predictions = tf.squeeze(predictions, 0)
        predictions = predictions / temperature
        predicted_id = tf.random.categorical(predictions, num_samples=1)[-1, 0].numpy()

        input_eval = tf.expand_dims([predicted_id], 0)
        text_generated.append(idx2char[predicted_id])

    return start_string + ''.join(text_generated)

print("\nGenerated Text Sample:")
print(generate_text(model, start_string="To be, or not to be", temperature=0.2))

print("\nGenerated Text Sample:")
print(generate_text(model, start_string="To be, or not to be", temperature=0.8))